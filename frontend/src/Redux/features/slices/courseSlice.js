import { createSlice } from "@reduxjs/toolkit";
const initialState ={
      course:{},
      courses:[],
      isUpdated:false,
      isDeleted :false,
      isAuthenticated:false,
      loading:true
}

export const courseSlice = createSlice({
    name:'course',
    initialState,
    reducers:{
        createCourseRequest(state,action){
            return{
                ...state,
                loading:true
            }
        },
        createCourseSuccess(state,action){
            return{
                ...state,
                isAuthenticated:true,
                course:action.payload
            }
        },
        createCourseFail(state,action){
            return{
                ...state,
                error:action.payload
            }
        },
        loadCoursesRequest(state,action){
            return{
                ...state,
                loading:true
            }
        },
        loadCoursesSuccess(state,action){
            return{
                ...state,
                isAuthenticated:true,
                courses:action.payload
            }
        },
        loadCoursesFail(state,action){
            return{
                ...state,
                error:action.payload
            }
        },
        getCourseRequest(state,action){
            return{
                ...state,
                loading:true
            }
        },
        getCourseSuccess(state,action){
            return{
                ...state,
                isAuthenticated:true,
                course:action.payload
            }
        },
        getCourseFail(state,action){
            return{
                ...state,
                error:action.payload
            }
        },
        updateCourseRequest(state,action){
            return{
                ...state,
                loading:true
            }
        },
        updateCourseSuccess(state,action){
            return{
                ...state,
                isAuthenticated:true,
                course:action.payload,
                isUpdated:true 
            }
        },
        updateCourseFail(state,action){
            return{
                ...state,
                error:action.payload
            }
        },
        deleteCourseRequest(state,action){
            return{
                ...state,
                loading:true
            }
        },
        deleteCourseSuccess(state,action){
            return{
                ...state,
                isAuthenticated:true,
                course:action.payload,
                isDeleted:true
            }
        },
        deleteCourseFail(state,action){
            return{
                ...state,
                error:action.payload
            }
        },
        clearUpdateCourse(state,action){
            return{
                ...state,
                isUpdated:false
            }
        },
        clearCourseError(state,action){
            return{
                ...state,
                error:null
            }
        }
    }
})

const {actions, reducer} = courseSlice;
export const {
    createCourseRequest,
    createCourseSuccess,
    createCourseFail,
    loadCoursesRequest,
    loadCoursesSuccess,
    loadCoursesFail,
    getCourseRequest,
    getCourseSuccess,
    getCourseFail,
    updateCourseRequest,
    updateCourseSuccess,
    updateCourseFail,
    deleteCourseRequest,
    deleteCourseSuccess,
    deleteCourseFail,
    clearCourseError,
    clearUpdateCourse
} = actions;

export default reducer;